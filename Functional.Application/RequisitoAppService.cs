namespace Functional.Application
{
    using System;
    using System.Linq;
    using System.Linq.Expressions;

    using Functional.Application.Common;
    using Functional.Application.Interfaces;
    using Functional.Data.Context;
    using Functional.Domain.Entities.Model;
    using Functional.Domain.Interfaces.Service;
    using Functional.Domain.Validation;

    /// <summary>
    /// Fornece as operações básicas de leitura e escrita para um <see cref="Requisito"/>
    /// </summary>
    /// <seealso cref="Functional.Application.Common.AppServiceBase{FunctionalContext}" />
    /// <seealso cref="Functional.Application.Interfaces.IRequisitoAppService" />
    /// <autogeneratedoc />
    public class RequisitoAppService : AppServiceBase<FunctionalContext>, IRequisitoAppService
    {
        private readonly IRequisitoService _requisitoService;

        private readonly IProjetoAppService _projetoAppService;

        public RequisitoAppService(IRequisitoService requisitoService, IProjetoAppService projetoAppService)
        {
            this._requisitoService = requisitoService;
            this._projetoAppService = projetoAppService;
        }

        public ValidationResult Create(Requisito entity)
        {
            try
            {
                entity.Projeto = this._projetoAppService.Get(entity.ProjetoId);

                this.BeginTransaction();
                this.ValidationResult = this._requisitoService.Create(entity);
                if (!this.ValidationResult.IsValid)
                {
                    return this.ValidationResult;
                }

                this.Commit();
                return this.ValidationResult;
            }
            catch (Exception ex)
            {
                this.ValidationResult.Add(new ValidationError(ex.Message));
                return this.ValidationResult;
            }
        }

        public ValidationResult Update(Requisito entity)
        {
            try
            {
                entity.Projeto = this._projetoAppService.Get(entity.ProjetoId);

                this.BeginTransaction();
                this.ValidationResult = this._requisitoService.Update(entity);
                if (!this.ValidationResult.IsValid)
                {
                    return this.ValidationResult;
                }

                this.Commit();
                return this.ValidationResult;
            }
            catch (Exception ex)
            {
                this.ValidationResult.Add(new ValidationError(ex.Message));
                return this.ValidationResult;
            }
        }

        public ValidationResult Remove(Requisito entity)
        {
            try
            {
                this.BeginTransaction();
                this.ValidationResult = this._requisitoService.Delete(entity);
                if (!this.ValidationResult.IsValid)
                {
                    return this.ValidationResult;
                }

                this.Commit();
                return this.ValidationResult;
            }
            catch (Exception ex)
            {
                this.ValidationResult.Add(new ValidationError(ex.Message));
                return this.ValidationResult;
            }
        }

        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        public Requisito Get(Guid id, bool @readonly = false)
        {
            return this._requisitoService.Get(id, @readonly);
        }

        public IQueryable<Requisito> All(bool @readonly = false)
        {
            return this._requisitoService.All(@readonly);
        }

        public IQueryable<Requisito> Find(Expression<Func<Requisito, bool>> predicate, bool @readonly = false)
        {
            return this._requisitoService.Find(predicate, @readonly);
        }
    }
}

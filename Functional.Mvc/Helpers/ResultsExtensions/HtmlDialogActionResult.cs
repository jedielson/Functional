namespace Functional.Mvc.Helpers.ResultsExtensions
{
    using System.IO;
    using System.Web.Mvc;

    public class HtmlDialogActionResult : ModalActionResult
    {
        private string ViewName { get; set; }

        public HtmlDialogActionResult(string message, string viewName, object callbackData)
            : base(message, callbackData)
        {
            this.ViewName = viewName;
        }

        public HtmlDialogActionResult(string message)
            : base(message)
        {
        }

        /// <summary>
        /// Processa o retorno dos dados para o callback do modal
        /// </summary>
        /// <param name="context">O contexto</param>
        /// <autogeneratedoc />
        protected override void ProcessData(ControllerContext context)
        {
            var data = string.Empty;

            if (this.CallbackData != null && !string.IsNullOrEmpty(ViewName?.Trim()))
            {
                data = RenderRazorViewToString(context, ViewName, CallbackData);
            }

            this.ParsedData = data;
        }

        private static string RenderRazorViewToString(ControllerContext context ,string viewName, object model)
        {
            var controller = context.Controller;
            controller.ViewData.Model = model;
            using (var sw = new StringWriter())
            {
                var viewResult = ViewEngines.Engines.FindPartialView(context, viewName);
                var viewContext = new ViewContext(context, viewResult.View, controller.ViewData, controller.TempData, sw);
                viewResult.View.Render(viewContext, sw);
                viewResult.ViewEngine.ReleaseView(context, viewResult.View);
                return sw.GetStringBuilder().ToString();
            }
        }
    }
}